// Generated by CoffeeScript 1.6.1
(function() {
  var module,
    __hasProp = {}.hasOwnProperty;

  module = angular.module('taggedStuff.controllers', []);

  module.controller('RootCtrl', [
    '$scope', '$rootScope', function(s, $rootScope) {
      s.broadcastKeypress = function(event) {
        var k, v;
        console.log(event);
        console.log('press-' + (event.keyCode || event.charCode) + '-' + angular.lowercase(event.target.nodeName));
        console.log(((function() {
          var _results;
          _results = [];
          for (k in event) {
            if (!__hasProp.call(event, k)) continue;
            v = event[k];
            if (v && k.match(/Key$/)) {
              _results.push(k);
            }
          }
          return _results;
        })()).sort().join('-'));
        return $rootScope.$broadcast('global.keypress', event);
      };
      return s.broadcastKeyup = function(event) {
        var k, v;
        console.log(event);
        console.log('up-' + event.keyCode + '-' + angular.lowercase(event.target.nodeName));
        console.log(((function() {
          var _results;
          _results = [];
          for (k in event) {
            if (!__hasProp.call(event, k)) continue;
            v = event[k];
            if (v && k.match(/Key$/)) {
              _results.push(k);
            }
          }
          return _results;
        })()).sort().join('-'));
        return $rootScope.$broadcast('global.keyup', event);
      };
    }
  ]);

  module.controller('SearchCtrl', [
    '$scope', 'searchService', function(s, searchService) {
      s.data = {
        searchString: ''
      };
      s.search = function() {
        return searchService.search(s.data.searchString);
      };
      s.searchAll = function() {
        return searchService.search(null);
      };
      return searchService.addListener(s, function(searchString) {
        return s.data.searchString = searchString;
      });
    }
  ]);

  module.controller('TagsCtrl', [
    '$scope', 'tagService', 'searchService', function(s, tagService, searchService) {
      var updateTags;
      s.data = {
        searchString: null
      };
      updateTags = function() {
        return s.tags = tagService.query({
          orderBy: 'id'
        });
      };
      s.searchForTag = function(tag) {
        return searchService.search('+' + tag.id);
      };
      return updateTags();
    }
  ]);

  module.controller('EntriesCtrl', [
    '$scope', 'entryService', 'searchService', function(s, entryService, searchService) {
      var selectedIndex, updateEntries;
      s.data = {
        searchString: null
      };
      selectedIndex = null;
      updateEntries = function() {
        selectedIndex = null;
        return s.entries = entryService.query({
          orderBy: '-createdTs',
          query: s.data.searchString
        });
      };
      s.entriesTitle = function() {
        if (s.data.searchString) {
          return 'Search result for "' + s.data.searchString + '"';
        } else {
          return 'All entries';
        }
      };
      s.isSelected = function(entry) {
        return entry === s.entries[selectedIndex];
      };
      s.isExpanded = function(entry) {
        return s.isSelected(entry);
      };
      s.select = function(entry) {
        var index;
        index = s.entries.indexOf(entry);
        return selectedIndex = index >= 0 ? index : null;
      };
      s.joinedTags = function(entry) {
        var tag;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = entry.tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(tag.id);
          }
          return _results;
        })()).sort().join(' ');
      };
      searchService.addListener(s, function(searchString) {
        s.data.searchString = searchString && searchString.length > 0 ? searchString : null;
        return updateEntries();
      });
      s.$on('global.keypress', function(_, event) {
        if (angular.lowercase(event.target.nodeName) === 'input') {
          return;
        }
        switch (event.keyCode || event.charCode) {
          case 106:
            if (s.entries.length > 0) {
              if ((selectedIndex != null) && selectedIndex < s.entries.length - 1) {
                return ++selectedIndex;
              } else if (selectedIndex == null) {
                return selectedIndex = 0;
              }
            }
            break;
          case 107:
            if (s.entries.length > 0) {
              if (selectedIndex > 0) {
                return --selectedIndex;
              } else if (selectedIndex == null) {
                return selectedIndex = s.entries.length - 1;
              }
            }
        }
      });
      return updateEntries();
    }
  ]);

}).call(this);
