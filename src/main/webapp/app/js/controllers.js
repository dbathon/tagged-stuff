// Generated by CoffeeScript 1.6.1
(function() {
  var module;

  module = angular.module('taggedStuff.controllers', []);

  module.controller('RootCtrl', [
    '$scope', '$rootScope', function(s, $rootScope) {
      var eventFromInput;
      eventFromInput = function(event) {
        var _ref;
        return (_ref = angular.lowercase(event.target.nodeName)) === 'input' || _ref === 'textarea';
      };
      s.broadcastKeypress = function(event) {
        if (!eventFromInput(event)) {
          return $rootScope.$broadcast('global.keypress', event);
        }
      };
      return s.broadcastKeyup = function(event) {
        if (!eventFromInput(event)) {
          return $rootScope.$broadcast('global.keyup', event);
        }
      };
    }
  ]);

  module.controller('SearchCtrl', [
    '$scope', 'searchService', function(s, searchService) {
      s.data = {
        searchString: ''
      };
      s.search = function() {
        return searchService.search(s.data.searchString);
      };
      s.searchAll = function() {
        return searchService.search(null);
      };
      return searchService.addListener(s, function(searchString) {
        return s.data.searchString = searchString;
      });
    }
  ]);

  module.controller('TagsCtrl', [
    '$scope', 'tagService', 'searchService', function(s, tagService, searchService) {
      var updateTags;
      s.data = {
        searchString: null
      };
      s.tags = [];
      updateTags = function() {
        return tagService.query({
          orderBy: 'id'
        }, s.tags);
      };
      s.searchForTag = function(tag) {
        return searchService.search('+' + tag.id);
      };
      s.$on('entry.saved', function() {
        return updateTags();
      });
      return updateTags();
    }
  ]);

  module.controller('EntriesCtrl', [
    '$scope', 'entryService', 'searchService', function(s, entryService, searchService) {
      var selectedIndex, updateEntries;
      s.data = {
        searchString: null
      };
      selectedIndex = null;
      s.entries = [];
      updateEntries = function() {
        selectedIndex = null;
        return entryService.query({
          orderBy: '-createdTs',
          query: s.data.searchString
        }, s.entries);
      };
      s.entriesTitle = function() {
        if (s.data.searchString) {
          return 'Search result for "' + s.data.searchString + '"';
        } else {
          return 'All entries';
        }
      };
      s.isSelected = function(entry) {
        return entry === s.entries[selectedIndex];
      };
      s.getSelectedEntry = function() {
        if (selectedIndex != null) {
          return s.entries[selectedIndex];
        } else {
          return null;
        }
      };
      s.isExpanded = function(entry) {
        return s.isSelected(entry);
      };
      s.select = function(entry) {
        var index;
        index = s.entries.indexOf(entry);
        if (selectedIndex === index && !s.isCurrentEntryNew()) {
          return selectedIndex = null;
        } else {
          return selectedIndex = index >= 0 ? index : null;
        }
      };
      s.down = function() {
        if (s.entries.length > 0) {
          if ((selectedIndex != null) && selectedIndex < s.entries.length - 1) {
            return ++selectedIndex;
          } else if (selectedIndex == null) {
            return selectedIndex = 0;
          }
        }
      };
      s.up = function() {
        if (s.entries.length > 0) {
          if (selectedIndex > 0) {
            return --selectedIndex;
          } else if (selectedIndex == null) {
            return selectedIndex = s.entries.length - 1;
          }
        }
      };
      s.newEntry = function() {
        if (!s.isCurrentEntryNew()) {
          s.entries.unshift({
            tags: []
          });
          return selectedIndex = 0;
        }
      };
      s.isCurrentEntryNew = function() {
        return selectedIndex === 0 && !s.entries[0].id;
      };
      s.cancelNewEntry = function() {
        if (s.isCurrentEntryNew()) {
          return s.entries.shift();
        }
      };
      s.$watch('isCurrentEntryNew()', function(newValue, oldValue) {
        var oldSelectedIndex;
        if (oldValue && !newValue && !s.entries[0].id) {
          oldSelectedIndex = selectedIndex;
          selectedIndex = 0;
          s.cancelNewEntry();
          return selectedIndex = oldSelectedIndex ? oldSelectedIndex - 1 : oldSelectedIndex;
        }
      });
      s.joinedTags = function(entry) {
        var tag;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = entry.tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(tag.id);
          }
          return _results;
        })()).sort().join(' ');
      };
      searchService.addListener(s, function(searchString) {
        s.data.searchString = searchString && searchString.length > 0 ? searchString : null;
        return updateEntries();
      });
      s.$on('global.keypress', function(_, event) {
        switch (event.keyCode || event.charCode) {
          case 106:
            s.down();
            return event.preventDefault();
          case 107:
            s.up();
            return event.preventDefault();
          case 110:
            s.newEntry();
            return event.preventDefault();
        }
      });
      return updateEntries();
    }
  ]);

  module.controller('EntryCtrl', [
    '$scope', 'entryService', '$window', '$rootScope', function(s, entryService, $window, $rootScope) {
      s.bodyLines = function(entry) {
        var line, _i, _len, _ref, _results;
        if (entry.body) {
          _ref = entry.body.split('\n');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if (line.trim().length > 0) {
              _results.push(line.trim());
            }
          }
          return _results;
        } else {
          return [];
        }
      };
      s.sortedTags = function(entry) {
        var tag;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = entry.tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(tag.id);
          }
          return _results;
        })()).sort();
      };
      s.editing = false;
      s.edited = {};
      s.data = {
        tagsText: null
      };
      s.startEdit = function(entry) {
        if (!s.editing) {
          angular.copy(entry, s.edited);
          s.data.tagsText = s.sortedTags(entry).join(' ');
          return s.editing = true;
        }
      };
      s.isEditing = function(entry) {
        if (s.editing) {
          return true;
        } else {
          if (!entry.id) {
            s.startEdit(entry);
          }
          return s.editing;
        }
      };
      s.saveEdit = function(entry) {
        var entryBackup, promise, tag;
        if (s.editing) {
          entryBackup = angular.copy(entry);
          angular.copy(s.edited, entry);
          entry.tags = (function() {
            var _i, _len, _ref, _results;
            _ref = s.data.tagsText.split(' ');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              if (tag.trim().length > 0) {
                _results.push({
                  id: tag.trim()
                });
              }
            }
            return _results;
          })();
          promise = entryService.save(entry);
          promise.success(function() {
            s.editing = false;
            return $rootScope.$broadcast('entry.saved');
          });
          return promise.error(function(data, status) {
            angular.copy(entryBackup, entry);
            return $window.alert('Save failed: ' + (angular.isObject(data) && data.error ? data.error : 'Status: ' + status));
          });
        }
      };
      s.cancelEdit = function(entry) {
        if (s.editing) {
          s.editing = false;
          return s.cancelNewEntry();
        }
      };
      s.$on('global.keypress', function(_, event) {
        var entry;
        switch (event.keyCode || event.charCode) {
          case 101:
            entry = s.getSelectedEntry();
            if (entry) {
              s.startEdit(entry);
              return event.preventDefault();
            }
        }
      });
      return s.formKeydown = function(event) {
        var entry;
        switch (event.keyCode) {
          case 27:
            entry = s.getSelectedEntry();
            if (entry) {
              s.cancelEdit(entry);
              return event.preventDefault();
            }
        }
      };
    }
  ]);

}).call(this);
