// Generated by CoffeeScript 1.6.1
(function() {
  var l, module;

  module = angular.module('taggedStuff.services', []);

  module.value('version', '0.2');

  l = function(o) {
    return console.log(o);
  };

  module.factory('baseRestPath', [
    '$window', function($window) {
      var path;
      path = $window.location.pathname;
      return (path.substring(0, path.lastIndexOf('/app'))) + '/rest/';
    }
  ]);

  module.factory('entityServiceFactory', [
    '$http', 'baseRestPath', function($http, baseRestPath) {
      return function(entityName) {
        var basePath, errorHandler;
        basePath = baseRestPath + 'entity/' + entityName + '/';
        errorHandler = function(data, status, headers, config) {
          return l([data, status, headers, config]);
        };
        return {
          query: function(params) {
            var p, result;
            result = [];
            p = $http({
              method: 'GET',
              url: basePath,
              params: params
            });
            p.success(function(data) {
              return result.push.apply(result, data.result);
            });
            p.error(errorHandler);
            return result;
          },
          get: function(id) {
            return {};
          },
          save: function(entity) {
            return entity;
          }
        };
      };
    }
  ]);

  module.factory('tagService', [
    'entityServiceFactory', function(entityServiceFactory) {
      return entityServiceFactory('tag');
    }
  ]);

  module.factory('entryService', [
    'entityServiceFactory', function(entityServiceFactory) {
      return entityServiceFactory('entry');
    }
  ]);

  module.factory('searchService', [
    '$rootScope', function($rootScope) {
      return {
        search: function(searchString) {
          return $rootScope.$broadcast('searchService.executeSearch', searchString);
        },
        addListener: function(scope, callback) {
          return scope.$on('searchService.executeSearch', function(event, searchString) {
            return callback(searchString);
          });
        }
      };
    }
  ]);

}).call(this);
